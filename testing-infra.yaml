
Description:  This template deploys a VPC, with three public three private, and three database subnets spread
  across three Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys three NAT gateways (one in each AZ),
  and default routes for them in the private subnets. 

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "test"
    AllowedValues: 
      - test
      - dev
      - prod

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.192.5.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.192.6.0/24

  DataBaseSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.0.0/24

  DataBaseSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.1.0/24

  DataBaseSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.192.7.0/24

  InstanceType:
    Description: Instance hosting a web server.
    Type: String
    Default: t2.micro
    
  ImageId:
    Description: Template that will run on the EC2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  MyKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  DBPort: 
    Default: 3306
    Description: TCP/IP port for the database
    Type: Number
    MinValue: 1150
    MaxValue: 65535

  DBUsername:
    Description: Username for MySQL database access
    NoEcho: 'true'
    Default: DatabaseUserName
    Type: AWS::SSM::Parameter::Value<String>
    MinLength: '8'
    MaxLength: '41'
    # ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPwd: 
    Description: The database admin account password
    NoEcho: true
    Default: databasePassword
    Type: AWS::SSM::Parameter::Value<String>
    MinLength: '8'
    MaxLength: '41'
    
  DBInstanceID:
    Default: database-1
    Description: My database instance identifier
    Type: String
    MinLength: '1'
    MaxLength: '63'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: MyDataBase
    Description: the name of my database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.

  MySourceRegion:
    Default: "us-east-1"
    Description: The Region where the DB will be created
    Type: String

  MyRRAvailabilityZone:
    Default: "us-east-2a"
    Description: The AZ where the RR will be created
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet(AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet(AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet(AZ3)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet(AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet(AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet(AZ3)
      
  DataBaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref DataBaseSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-subnet(AZ1)

  DataBaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref DataBaseSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-subnet(AZ2)      EnvironmentName

  DataBaseSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref DataBaseSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-subnet(AZ3)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  
  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3    

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-RTB

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-RTB(AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private RTB (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private RTB (AZ3)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  DataBaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-RTB

  DataBase1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataBaseRouteTable
      SubnetId: !Ref DataBaseSubnet1

  DataBase2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataBaseRouteTable
      SubnetId: !Ref DataBaseSubnet2    


  DataBase3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataBaseRouteTable
      SubnetId: !Ref DataBaseSubnet3

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-NACL
        
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: '22'
        To: '22'

  InboundEmphemeralPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PublicSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet3NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-NACL
       
  InboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0 
      PortRange:
        From: '0'
        To: '65535'

  OutBoundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PrivateSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet3NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl    

  DataBaseNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-NACL
       
  InboundDataBaseNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DataBaseNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR 
      PortRange:
        From: '0'
        To: '65535'

  OutBoundDataBaseNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DataBaseNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  DataBaseSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DataBaseSubnet1
      NetworkAclId: !Ref DataBaseNetworkAcl

  DataBaseSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DataBaseSubnet2
      NetworkAclId: !Ref DataBaseNetworkAcl
      
  DataBaseSubnet3NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DataBaseSubnet3
      NetworkAclId: !Ref DataBaseNetworkAcl

  RootRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
              - ec2.amazonaws.com
          Action: 
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - Ref: RoleManagedPolicy

  RoleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:                  # THIS IS A CUSTOMER MANAGED POLICY
          -
            Effect: Allow
            Action: "*"
            Resource: "*"
      
  RootInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
      - Ref: "RootRole"

  MyPubTestInstance1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      SecurityGroupIds: 
        - Ref: PublicSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Server-public1
      KeyName:
        Ref: MyKeyName
      IamInstanceProfile: 
        Ref: RootInstanceProfile
      UserData:
        Fn::Base64:
          #!/bin/bash
          yum install httpd mysql php php-mysql -y
          amazon-linux-extras install -y php7.2
          cd /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          cp -r wordpress/* /var/www/html/
          rm -rf wordpress
          rm -rf latest.tar.gz
          service httpd start
          chkconfig httpd on
   
  MyPubTestInstance2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      SecurityGroupIds: 
        - Ref: PublicSecurityGroup
      SubnetId: !Ref PublicSubnet2
      IamInstanceProfile: 
        Ref: RootInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Server-public2
      UserData:
        Fn::Base64:
          chmod +x apache-linux.sh
          ./apache-linux.sh
       
      KeyName:
        Ref: MyKeyName

  MyPubTestInstance3: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      SecurityGroupIds: 
        - Ref: PublicSecurityGroup
      SubnetId: !Ref PublicSubnet3
      IamInstanceProfile: 
        Ref: RootInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Server-public3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo “Hello from server in ${AWS::Region}” > /var/www/html/index.html
      KeyName:
        Ref: MyKeyName      

  # MyPrivateTestInstance1: 
  #   Type: AWS::EC2::Instance
  #   Properties: 
  #     ImageId: 
  #       Ref: ImageId
  #     InstanceType: 
  #       Ref: InstanceType
  #     SecurityGroupIds: 
  #       - Ref: PrivateSecurityGroup
  #     SubnetId: !Ref PrivateSubnet1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-Server-private1
  #     UserData:
  #       Fn::Base64: #!Sub |
  #        "#!/bin/bash
  #         yum install httpd mysql php php-mysql -y
  #         amazon-linux-extras install -y php7.2
  #         cd /var/www/html
  #         wget https://wordpress.org/latest.tar.gz
  #         tar -xzf latest.tar.gz
  #         cp -r wordpress/* /var/www/html/
  #         rm -rf wordpress
  #         rm -rf latest.tar.gz
  #         service httpd start
  #         chkconfig httpd on"
  #     KeyName:
  #       Ref: MyKeyName

  # MyPrivateTestInstance2: 
  #   Type: AWS::EC2::Instance
  #   Properties: 
  #     ImageId: 
  #       Ref: ImageId
  #     InstanceType: 
  #       Ref: InstanceType
  #     SecurityGroupIds: 
  #       - Ref: PrivateSecurityGroup
  #     SubnetId: !Ref PrivateSubnet2
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-Server-private2
  #     UserData:
  #       Fn::Base64: #!Sub |
  #        "#!/bin/bash
  #         yum install httpd mysql php php-mysql -y
  #         amazon-linux-extras install -y php7.2
  #         cd /var/www/html
  #         wget https://wordpress.org/latest.tar.gz
  #         tar -xzf latest.tar.gz
  #         cp -r wordpress/* /var/www/html/
  #         rm -rf wordpress
  #         rm -rf latest.tar.gz
  #         service httpd start
  #         chkconfig httpd on"
  #     KeyName:
  #       Ref: MyKeyName


  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access and ssh into the instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 173.164.135.61/32   #!Ref VpcCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-SG

  # PrivateSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Allow http access and ssh into the instance
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         SourceSecurityGroupId: !Ref PublicSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         CidrIp: 173.164.135.61/32   #!Ref VpcCIDR
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-Private-SG

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow private SG access to the DB
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: !Ref DBPort
        #   ToPort: !Ref DBPort
        #   SourceSecurityGroupId: !Ref PrivateSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref PublicSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-SG

  MySQLSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: subnets where the DB will live
      DBSubnetGroupName: !Sub ${EnvironmentName}-subnet-group 
      SubnetIds: 
        - !Ref DataBaseSubnet1
        - !Ref DataBaseSubnet2
        - !Ref DataBaseSubnet3     
      Tags: 
        - Key: "Name"
          Value: !Sub ${EnvironmentName}-subnet-group

  MySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      # AvailabilityZone: !Ref MyDBAvailabilityZone   # this option is not valid for multiAZ deployment
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref MySQLSubnetGroup
      Engine: MySQL
      MasterUsername: !Ref DBUsername    
      MasterUserPassword: !Ref DBPwd
      MultiAZ: "true"
      PubliclyAccessible: "false"
      BackupRetentionPeriod: "7"
      DBInstanceIdentifier: !Ref DBInstanceID
      StorageEncrypted: "true"
      VPCSecurityGroups: 
        - !GetAtt 
          - DBSecurityGroup
          - GroupId
      Tags: 
        - Key: "Database"
          Value: !Sub ${EnvironmentName}-MyDB-${AWS::Region}

  # MySQLRRDatabase:
  #   Type: "AWS::RDS::DBInstance"
  #   Properties:
  #     # AvailabilityZone: !Ref MyRRAvailabilityZone
  #     DBInstanceClass: !Ref DBInstanceClass                      # NEEDS TO BE MADE CROSS-REGION REPLICA
  #     SourceDBInstanceIdentifier: !Ref DBInstanceID
  #     SourceRegion: !Ref MySourceRegion

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !GetAtt VPC.VpcId
    Export:
      Name: VpcId

  PublicSubnets:
    Description: A list of the public subnetsIDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]
    Export:
      Name: pubsubnets

  PrivateSubnets:
    Description: A list of the private subnetsIDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]
    Export:
      Name: privsubnets

  DataBaseSubnets:
    Description: A list of the database subnetsIDs
    Value: !Join [ ",", [ !Ref DataBaseSubnet1, !Ref DataBaseSubnet2, !Ref DataBaseSubnet3 ]]
    Export:
      Name: databasesubnets

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !GetAtt PublicSubnet1.SubnetId
    Export:
      Name: PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !GetAtt PublicSubnet2.SubnetId
    Export:
      Name: PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !GetAtt PublicSubnet3.SubnetId
    Export:
      Name: PublicSubnet3

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !GetAtt PrivateSubnet1.SubnetId
    Export:
      Name: PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !GetAtt PrivateSubnet2.SubnetId
    Export:
      Name: PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !GetAtt PrivateSubnet3.SubnetId
    Export:
      Name: PrivateSubnet3

  DataBaseSubnet1:
    Description: A reference to the database subnet in the 1st Availability Zone
    Value: !GetAtt DataBaseSubnet1.SubnetId 
    Export:
      Name: DB-Subnet1

  DataBaseSubnet2:
    Description: A reference to the database subnet in the 2nd Availability Zone
    Value: !GetAtt DataBaseSubnet2.SubnetId
    Export:
      Name: DB-Subnet2

  DataBaseSubnet3:
    Description: A reference to the database subnet in the 3rd Availability Zone
    Value: !GetAtt DataBaseSubnet3.SubnetId
    Export:
      Name: DB-Subnet3

  # MyPrivateSecurityGroup:
  #   Description: A reference to the sg attached the instance
  #   Value: !GetAtt PrivateSecurityGroup.GroupId
  #   Export:
  #     Name: private-SG

  MyPublicSecurityGroup:
    Description: A reference to the sg attached the instance
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: public-SG    

  MyDBInstanceArn:
    Description: The arn for the DB instance
    Value: !GetAtt MySQLDatabase.DBInstanceArn
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceArn-${AWS::Region} 
    
  MyDBEndpoint:
    Description: The connection endpoint for the database
    Value: !GetAtt MySQLDatabase.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DB-Endpoint-${AWS::Region}